
mixin step( i, icon, name, user_vote )
	if i > 0
		span.vote
			label
				input(
					name = name
					type = 'radio'
					value = i
					checked = ( user_vote === i )
					autocomplete = "off"
					disabled = ( transaction_id == null )
				)
				+step( i - 1, icon, name, user_vote )
				i(class='icon-'+icon+'-up')

-
	// Expects variables metric, score, [user_vote], [transaction_id], [input_name]
	name = input_name || 'metric-' + metric.metric_id
	options = metric.options
	icon = options['icon']
	max = options['max']
	display = score.display || 0

if icon === 'slider'
	label.vote
		input(
			name = name
			type = 'range'
			min = '0'
			step = '1'
			max = max
			value = user_vote || 0
			autocomplete = "off"
			disabled = ( transaction_id == null )
		)
else if icon == 'numeric'
	label.vote
		input(
			name = name
			type = 'text'
			size = max.toString().length
			value = user_vote
			placeholder = '0'
			autocomplete = "off"
			disabled = ( transaction_id == null )
		)
		span= " / " + max + " -"
else
	+step(max, icon, name, user_vote)

span.score(title="Average")
	| #{display}

script.
	if ( typeof RANGE_SCRIPT === 'undefined' ) {
		RANGE_SCRIPT = true;
		
		jQuery('.metric-range').on( 'evaluate-update', function( event, data, choice ) {
			var element = jQuery(this);
			element.find('.score').text( data.score );

			if ( data.vote != choice ) {
				if ( '#{icon}' == 'slider' || '#{icon}' == 'numeric' ) {
					element.find( 'input' ).val( data.vote );
				} else if ( data.vote != null ) {
					element.find( 'input[value="' + data.vote + '"]' ).prop( 'checked', true );
				} else {
					element.find( 'input:checked' ).prop( 'checked', false );
				}
			}
			
			event.stopPropagation();
		} );
	}
