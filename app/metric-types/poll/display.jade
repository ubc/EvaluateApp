-
	// This file defines how a "Poll" metric should look.
	// Expects variables metric, score, [user_vote], [transaction_id], [input_name]

	// Explicitly define the expected variables.	
	name = input_name || 'metric-' + metric.metric_id
	options = metric.options || {}
	answers = options['answers'] ? options['answers'].split( /\r?\n/ ) : []
	multiselect = options['multiselect'] || false
	total_votes = score.count || 0
	votes = score.data || {}

ul
	each text, i in answers
		- vote_count = votes[i] || 0
		- user_selected = ( user_vote instanceof Array ? user_vote.indexOf(i) > -1 : user_vote === i )
		li
			label.vote
				input(
					name = name
					type = ( multiselect == 'on' ? 'checkbox' : 'radio' )
					value = i
					checked = ( user_selected )
					autocomplete = "off"
					disabled = ( transaction_id == null )
				)
				span
					| #{text}
			span.score(class="score-" + i, title="Total")
				| #{vote_count}
			br
			progress(
				class = "score-" + i
				max = total_votes
				value = vote_count
			)

script.
	// This check makes sure that the script is only run once.
	if ( typeof POLL_SCRIPT === 'undefined' ) {
		POLL_SCRIPT = true;
		
		// When our front-end code receives an update on the value of this metric, this callback will run to update the UI.
		jQuery('.metric-poll').on( 'evaluate-update', function( event, data, choice ) {
			var element = jQuery(this);

			// Set the score values to what we received, for each poll option.
			for ( var k in data.score_data ) {
				var value = data.score_data[k];
				var score = element.find( 'span.score-' + k );
				var progress = element.find( 'progress.score-' + k )

				score.text( value );
				progress.attr( 'value', value );
				progress.attr( 'max', data.total );
			}

			// Since the data object will contain integers for each vote, make sure that "choice" has the same, for later comparison.
			for ( var i in choice ) {
				choice[i] = parseInt( choice[i] );
			}

			// If the new and expected vote are not the same, update our UI.
			if ( Object.toString( data.vote ) != Object.toString( choice ) ) {
				// Loop through each poll option and update it.
				element.find( 'input' ).each( function() {
					var input = jQuery(this);
					var checked = data.vote != null && data.vote.indexOf( parseInt( input.val() ) ) > -1;
					input.prop( 'checked', checked );
				} );
			}

			// Prevent the default evaluate-update event
			event.stopImmediatePropagation();
		} );
	}
